---
export interface Props {
  title?: string;
  description?: string;
  image?: string;
  noIndex?: boolean;
}

const {
  title = 'Pocket Expense Wallet',
  description = 'Track your expenses offline with advanced PWA features',
  image = '/og-image.png',
  noIndex = false,
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang="en" class="h-full">
  <head>
    <!-- Meta tags -->
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    
    <!-- PWA Meta Tags -->
    <meta name="application-name" content="PEW" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <meta name="apple-mobile-web-app-title" content="PEW" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="msapplication-config" content="/browserconfig.xml" />
    <meta name="msapplication-TileColor" content="#1f2937" />
    <meta name="msapplication-tap-highlight" content="no" />
    <meta name="theme-color" content="#1f2937" />
    <meta name="color-scheme" content="light dark" />
    
    <!-- Apple Touch Icons -->
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="apple-touch-icon" sizes="152x152" href="/apple-touch-icon-152x152.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon-180x180.png" />
    <link rel="apple-touch-icon" sizes="167x167" href="/apple-touch-icon-167x167.png" />
    
    <!-- Splash screens for iOS -->
    <link rel="apple-touch-startup-image" href="/apple-splash-2048-2732.jpg" media="(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" />
    <link rel="apple-touch-startup-image" href="/apple-splash-1668-2388.jpg" media="(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" />
    <link rel="apple-touch-startup-image" href="/apple-splash-1536-2048.jpg" media="(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" />
    <link rel="apple-touch-startup-image" href="/apple-splash-1125-2436.jpg" media="(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)" />
    <link rel="apple-touch-startup-image" href="/apple-splash-1242-2688.jpg" media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)" />
    <link rel="apple-touch-startup-image" href="/apple-splash-750-1334.jpg" media="(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" />
    <link rel="apple-touch-startup-image" href="/apple-splash-828-1792.jpg" media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" />
    
    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:site_name" content="Pocket Expense Wallet" />
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(image, Astro.url)} />
    
    <!-- SEO -->
    {noIndex && <meta name="robots" content="noindex, nofollow" />}
    
    <!-- Title -->
    <title>{title}</title>
    
    <!-- Preload critical resources -->
    <!-- Font preload temporarily disabled - using system fonts -->
    <!-- <link rel="preload" href="/fonts/inter-var.woff2" as="font" type="font/woff2" crossorigin /> -->
    
    <!-- Global styles -->
    <link rel="stylesheet" href="/src/styles/global.css" />
    
    <!-- Inline critical CSS for faster loading -->
    <style>
      /* Critical CSS for initial paint */
      .app-loading {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: #111827;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
      }
      
      .app-loading-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid #374151;
        border-top-color: #3b82f6;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }
      
      @keyframes spin {
        to { transform: rotate(360deg); }
      }
    </style>
  </head>
  <body class="h-full bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
    <!-- App loading screen -->
    <div id="app-loading" class="app-loading">
      <div class="app-loading-spinner"></div>
    </div>
    
    <!-- Main app container -->
    <div id="app" class="app-container" style="display: none;">
      <slot />
    </div>
    
    <!-- PWA initialization script -->
    <script>
      // Set CSS custom property for viewport height
      function setVH() {
        const vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
      }
      
      setVH();
      window.addEventListener('resize', setVH);
      window.addEventListener('orientationchange', () => {
        setTimeout(setVH, 100);
      });
      
      // Hide loading screen when DOM is ready
      document.addEventListener('DOMContentLoaded', () => {
        const loading = document.getElementById('app-loading');
        const app = document.getElementById('app');
        
        if (loading && app) {
          loading.style.display = 'none';
          app.style.display = 'block';
        }
      });
      
      // Theme detection and initialization
      function initTheme() {
        const savedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const theme = savedTheme || (prefersDark ? 'dark' : 'light');
        
        document.documentElement.classList.toggle('dark', theme === 'dark');
        
        // Update theme-color meta tag
        const themeColor = theme === 'dark' ? '#111827' : '#f9fafb';
        document.querySelector('meta[name="theme-color"]')?.setAttribute('content', themeColor);
      }
      
      initTheme();
      
      // Listen for theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
        if (!localStorage.getItem('theme')) {
          initTheme();
        }
      });
      
      // PWA install prompt handling
      let deferredPrompt: any = null;
      
      window.addEventListener('beforeinstallprompt', (e: any) => {
        e.preventDefault();
        deferredPrompt = e;
        
        // Show install button or banner
        const installButton = document.querySelector('[data-pwa-install]') as HTMLElement;
        if (installButton) {
          installButton.style.display = 'block';
          installButton.addEventListener('click', async () => {
            if (deferredPrompt) {
              deferredPrompt.prompt();
              const { outcome } = await deferredPrompt.userChoice;
              console.log(`PWA install prompt outcome: ${outcome}`);
              deferredPrompt = null;
            }
          });
        }
      });
      
      // Track PWA installation
      window.addEventListener('appinstalled', () => {
        console.log('PWA was installed successfully');
        deferredPrompt = null;
      });
      
      // Service Worker registration
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', async () => {
          try {
            const registration = await navigator.serviceWorker.register('/sw.js');
            console.log('SW registered: ', registration);
            
            // Handle SW updates
            registration.addEventListener('updatefound', () => {
              const newWorker = registration.installing;
              if (newWorker) {
                newWorker.addEventListener('statechange', () => {
                  if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                    // New content is available, prompt user to refresh
                    if (confirm('New version available! Refresh to update?')) {
                      window.location.reload();
                    }
                  }
                });
              }
            });
          } catch (error) {
            console.log('SW registration failed: ', error);
          }
        });
      }
      
      // Request persistent storage
      if ('storage' in navigator && navigator.storage && 'persist' in navigator.storage) {
        navigator.storage.persist().then((persistent) => {
          console.log(`Persistent storage granted: ${persistent}`);
        });
      }
    </script>
  </body>
</html>
